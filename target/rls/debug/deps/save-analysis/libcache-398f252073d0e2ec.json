{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"C:\\Users\\thund\\.cargo\\git\\checkouts\\cache-85181dc5e5987131\\3c8e9bd","program":"C:\\Users\\thund\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","cache","--edition=2021","C:\\Users\\thund\\.cargo\\git\\checkouts\\cache-85181dc5e5987131\\3c8e9bd\\src\\lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=398f252073d0e2ec","-C","extra-filename=-398f252073d0e2ec","--out-dir","d:\\CS Files\\PSU CS Files\\winterTerm2022\\rust\\hw-cache\\target\\rls\\debug\\deps","-L","dependency=d:\\CS Files\\PSU CS Files\\winterTerm2022\\rust\\hw-cache\\target\\rls\\debug\\deps","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\thund\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"d:\\CS Files\\PSU CS Files\\winterTerm2022\\rust\\hw-cache\\target\\rls\\debug\\deps\\libcache-398f252073d0e2ec.rmeta"},"prelude":{"crate_id":{"name":"cache","disambiguator":[7724520761657346080,0]},"crate_root":"C:\\Users\\thund\\.cargo\\git\\checkouts\\cache-85181dc5e5987131\\3c8e9bd\\src","external_crates":[{"file_name":"C:\\Users\\thund\\.cargo\\git\\checkouts\\cache-85181dc5e5987131\\3c8e9bd\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[10096348926132587111,0]}},{"file_name":"C:\\Users\\thund\\.cargo\\git\\checkouts\\cache-85181dc5e5987131\\3c8e9bd\\src\\lib.rs","num":2,"id":{"name":"core","disambiguator":[6130085985959571423,0]}},{"file_name":"C:\\Users\\thund\\.cargo\\git\\checkouts\\cache-85181dc5e5987131\\3c8e9bd\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[10834538756664496827,0]}},{"file_name":"C:\\Users\\thund\\.cargo\\git\\checkouts\\cache-85181dc5e5987131\\3c8e9bd\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[16052532455530240381,0]}},{"file_name":"C:\\Users\\thund\\.cargo\\git\\checkouts\\cache-85181dc5e5987131\\3c8e9bd\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[9943859611570948275,0]}},{"file_name":"C:\\Users\\thund\\.cargo\\git\\checkouts\\cache-85181dc5e5987131\\3c8e9bd\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[2085945775536176072,0]}},{"file_name":"C:\\Users\\thund\\.cargo\\git\\checkouts\\cache-85181dc5e5987131\\3c8e9bd\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[9544986399897469044,0]}},{"file_name":"C:\\Users\\thund\\.cargo\\git\\checkouts\\cache-85181dc5e5987131\\3c8e9bd\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[17772512906340842432,0]}},{"file_name":"C:\\Users\\thund\\.cargo\\git\\checkouts\\cache-85181dc5e5987131\\3c8e9bd\\src\\lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[2307131819628043677,0]}},{"file_name":"C:\\Users\\thund\\.cargo\\git\\checkouts\\cache-85181dc5e5987131\\3c8e9bd\\src\\lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[8458190703300588207,0]}},{"file_name":"C:\\Users\\thund\\.cargo\\git\\checkouts\\cache-85181dc5e5987131\\3c8e9bd\\src\\lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[5770881746596919874,0]}},{"file_name":"C:\\Users\\thund\\.cargo\\git\\checkouts\\cache-85181dc5e5987131\\3c8e9bd\\src\\lib.rs","num":12,"id":{"name":"std_detect","disambiguator":[9756748775720564409,0]}},{"file_name":"C:\\Users\\thund\\.cargo\\git\\checkouts\\cache-85181dc5e5987131\\3c8e9bd\\src\\lib.rs","num":13,"id":{"name":"panic_unwind","disambiguator":[13144887679811945557,0]}}],"span":{"file_name":"C:\\Users\\thund\\.cargo\\git\\checkouts\\cache-85181dc5e5987131\\3c8e9bd\\src\\lib.rs","byte_start":0,"byte_end":2069,"line_start":1,"line_end":73,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\thund\\.cargo\\git\\checkouts\\cache-85181dc5e5987131\\3c8e9bd\\src\\lib.rs","byte_start":0,"byte_end":2069,"line_start":1,"line_end":73,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\thund\\.cargo\\git\\checkouts\\cache-85181dc5e5987131\\3c8e9bd\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3}],"decl_id":null,"docs":"This crate provides a `Cache` trait that can be used to\nprovide a common interface for cache implementations.  The\nassociated `cache-tests` crate provides some generic cache\ntests.","sig":null,"attributes":[{"value":"*\nThis crate provides a `Cache` trait that can be used to\nprovide a common interface for cache implementations.  The\nassociated `cache-tests` crate provides some generic cache\ntests.\n\n# Background\n\nA *cache* is a common structure in computing. It manifests\nas a memory store that sits \"in front of\" some collection of\nvalues that are difficult or expensive to produce. When a\nvalue is requested, it may be present in the cache, in which\ncase it can be quickly returned. Otherwise the produced\nvalue may be stored in the cache for later reference.\n\nTypically a cache has too little storage to contain all the\nvalues that might be produced during a computation. Thus an\n*eviction policy* is needed, specifying which of the\ncompeting values should be retained.\n\nThe `Cache` trait here abstracts over caches with different\ncapacities and eviction policies, providing a simple\ninterface.\n\n# Examples\n\n```\nuse cache::Cache;\n\nuse std::collections::HashMap;\nuse std::hash::Hash;\n\n#[derive(Default)]\nstruct HashMapCache<K, I>(HashMap<K, I>);\n\nimpl<K: Hash + Eq, I> HashMapCache<K, I> {\n    fn insert(&mut self, key: K, item: I) {\n        self.0.insert(key, item);\n    }\n    fn retrieve(&mut self, key: &K) -> Option<&mut I> {\n        self.0.get_mut(&key)\n    }\n}\n\nimpl<K: Hash + Eq, I> Cache<K> for HashMapCache<K, I> {\n    type Item = I;\n\n    fn insert(&mut self, key: K, item: I) {\n        self.insert(key, item);\n    }\n    fn retrieve(&mut self, key: &K) -> Option<&mut I> {\n        self.retrieve(key)\n    }\n}\n\ncache_tests::test_fib_cache(Box::new(HashMapCache::default()));\n```\n*/","span":{"file_name":"C:\\Users\\thund\\.cargo\\git\\checkouts\\cache-85181dc5e5987131\\3c8e9bd\\src\\lib.rs","byte_start":0,"byte_end":1577,"line_start":1,"line_end":58,"column_start":1,"column_end":3}}]},{"kind":"Trait","id":{"krate":0,"index":3},"span":{"file_name":"C:\\Users\\thund\\.cargo\\git\\checkouts\\cache-85181dc5e5987131\\3c8e9bd\\src\\lib.rs","byte_start":1610,"byte_end":1615,"line_start":61,"line_end":61,"column_start":11,"column_end":16},"name":"Cache","qualname":"::Cache","value":"Cache<K>","parent":null,"children":[{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8}],"decl_id":null,"docs":" A generic cache.\n","sig":null,"attributes":[{"value":"/ A generic cache.","span":{"file_name":"C:\\Users\\thund\\.cargo\\git\\checkouts\\cache-85181dc5e5987131\\3c8e9bd\\src\\lib.rs","byte_start":1579,"byte_end":1599,"line_start":60,"line_end":60,"column_start":1,"column_end":21}}]},{"kind":"Type","id":{"krate":0,"index":5},"span":{"file_name":"C:\\Users\\thund\\.cargo\\git\\checkouts\\cache-85181dc5e5987131\\3c8e9bd\\src\\lib.rs","byte_start":1665,"byte_end":1669,"line_start":63,"line_end":63,"column_start":10,"column_end":14},"name":"Item","qualname":"::Cache::Item","value":"type Item;","parent":{"krate":0,"index":3},"children":[],"decl_id":null,"docs":" Type of item being cached.\n","sig":null,"attributes":[{"value":"/ Type of item being cached.","span":{"file_name":"C:\\Users\\thund\\.cargo\\git\\checkouts\\cache-85181dc5e5987131\\3c8e9bd\\src\\lib.rs","byte_start":1625,"byte_end":1655,"line_start":62,"line_end":62,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":6},"span":{"file_name":"C:\\Users\\thund\\.cargo\\git\\checkouts\\cache-85181dc5e5987131\\3c8e9bd\\src\\lib.rs","byte_start":1732,"byte_end":1738,"line_start":65,"line_end":65,"column_start":8,"column_end":14},"name":"insert","qualname":"::Cache::insert","value":"pub fn insert(&mut Self, K, Self::Item)","parent":{"krate":0,"index":3},"children":[],"decl_id":null,"docs":" Insert an item in the cache at the given key.\n","sig":null,"attributes":[{"value":"/ Insert an item in the cache at the given key.","span":{"file_name":"C:\\Users\\thund\\.cargo\\git\\checkouts\\cache-85181dc5e5987131\\3c8e9bd\\src\\lib.rs","byte_start":1675,"byte_end":1724,"line_start":64,"line_end":64,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":7},"span":{"file_name":"C:\\Users\\thund\\.cargo\\git\\checkouts\\cache-85181dc5e5987131\\3c8e9bd\\src\\lib.rs","byte_start":1849,"byte_end":1857,"line_start":67,"line_end":67,"column_start":8,"column_end":16},"name":"retrieve","qualname":"::Cache::retrieve","value":"pub fn retrieve(&mut Self, &K) -> Option<&mut Self::Item>","parent":{"krate":0,"index":3},"children":[],"decl_id":null,"docs":" Retrieve the item in the cache at the given key, if any.\n","sig":null,"attributes":[{"value":"/ Retrieve the item in the cache at the given key, if any.","span":{"file_name":"C:\\Users\\thund\\.cargo\\git\\checkouts\\cache-85181dc5e5987131\\3c8e9bd\\src\\lib.rs","byte_start":1781,"byte_end":1841,"line_start":66,"line_end":66,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":8},"span":{"file_name":"C:\\Users\\thund\\.cargo\\git\\checkouts\\cache-85181dc5e5987131\\3c8e9bd\\src\\lib.rs","byte_start":2014,"byte_end":2022,"line_start":70,"line_end":70,"column_start":8,"column_end":16},"name":"capacity","qualname":"::Cache::capacity","value":"pub fn capacity(&Self) -> Option<usize>","parent":{"krate":0,"index":3},"children":[],"decl_id":null,"docs":" Report the capacity limit of the cache. If `None`, the\n cache may grow without bound.\n","sig":null,"attributes":[{"value":"/ Report the capacity limit of the cache. If `None`, the","span":{"file_name":"C:\\Users\\thund\\.cargo\\git\\checkouts\\cache-85181dc5e5987131\\3c8e9bd\\src\\lib.rs","byte_start":1910,"byte_end":1968,"line_start":68,"line_end":68,"column_start":5,"column_end":63}},{"value":"/ cache may grow without bound.","span":{"file_name":"C:\\Users\\thund\\.cargo\\git\\checkouts\\cache-85181dc5e5987131\\3c8e9bd\\src\\lib.rs","byte_start":1973,"byte_end":2006,"line_start":69,"line_end":69,"column_start":5,"column_end":38}}]}],"impls":[],"refs":[],"macro_refs":[],"relations":[]}